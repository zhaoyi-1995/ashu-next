/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20, ERC20Interface } from "../ERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200180f3803806200180f8339818101604052810190620000379190620001f6565b8160039081620000489190620004cc565b5080600490816200005a9190620004cc565b505050620005b3565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000cc8262000081565b810181811067ffffffffffffffff82111715620000ee57620000ed62000092565b5b80604052505050565b60006200010362000063565b9050620001118282620000c1565b919050565b600067ffffffffffffffff82111562000134576200013362000092565b5b6200013f8262000081565b9050602081019050919050565b60005b838110156200016c5780820151818401526020810190506200014f565b60008484015250505050565b60006200018f620001898462000116565b620000f7565b905082815260208101848484011115620001ae57620001ad6200007c565b5b620001bb8482856200014c565b509392505050565b600082601f830112620001db57620001da62000077565b5b8151620001ed84826020860162000178565b91505092915050565b6000806040838503121562000210576200020f6200006d565b5b600083015167ffffffffffffffff81111562000231576200023062000072565b5b6200023f85828601620001c3565b925050602083015167ffffffffffffffff81111562000263576200026262000072565b5b6200027185828601620001c3565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002ce57607f821691505b602082108103620002e457620002e362000286565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b60008160020a8302905092915050565b600060088302620003517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200030f565b6200035d86836200030f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003aa620003a46200039e8462000375565b6200037f565b62000375565b9050919050565b6000819050919050565b620003c68362000389565b620003de620003d582620003b1565b8484546200031f565b825550505050565b600090565b620003f5620003e6565b62000402818484620003bb565b505050565b5b818110156200042a576200041e600082620003eb565b60018101905062000408565b5050565b601f82111562000479576200044381620002ea565b6200044e84620002ff565b810160208510156200045e578190505b620004766200046d85620002ff565b83018262000407565b50505b505050565b60008160020a8304905092915050565b6000620004a1600019846008026200047e565b1980831691505092915050565b6000620004bc83836200048e565b9150826002028217905092915050565b620004d7826200027b565b67ffffffffffffffff811115620004f357620004f262000092565b5b620004ff8254620002b5565b6200050c8282856200042e565b600060209050601f8311600181146200054457600084156200052f578287015190505b6200053b8582620004ae565b865550620005ab565b601f1984166200055486620002ea565b60005b828110156200057e5784890151825560018201915060208501945060208101905062000557565b868310156200059e57848901516200059a601f8916826200048e565b8355505b6001600288020188555050505b505050505050565b61124c80620005c36000396000f3fe608060405234801561001057600080fd5b50600436106100c6576000357c010000000000000000000000000000000000000000000000000000000090048063395093511161008e578063395093511461018557806370a08231146101b557806395d89b41146101e5578063a457c2d714610203578063a9059cbb14610233578063dd62ed3e14610263576100c6565b806306fdde03146100cb578063095ea7b3146100e957806318160ddd1461011957806323b872dd14610137578063313ce56714610167575b600080fd5b6100d3610293565b6040516100e09190610b29565b60405180910390f35b61010360048036038101906100fe9190610be4565b610325565b6040516101109190610c3f565b60405180910390f35b610121610348565b60405161012e9190610c69565b60405180910390f35b610151600480360381019061014c9190610c84565b610352565b60405161015e9190610c3f565b60405180910390f35b61016f610381565b60405161017c9190610cf3565b60405180910390f35b61019f600480360381019061019a9190610be4565b61038a565b6040516101ac9190610c3f565b60405180910390f35b6101cf60048036038101906101ca9190610d0e565b6103c1565b6040516101dc9190610c69565b60405180910390f35b6101ed610409565b6040516101fa9190610b29565b60405180910390f35b61021d60048036038101906102189190610be4565b61049b565b60405161022a9190610c3f565b60405180910390f35b61024d60048036038101906102489190610be4565b610512565b60405161025a9190610c3f565b60405180910390f35b61027d60048036038101906102789190610d3b565b610535565b60405161028a9190610c69565b60405180910390f35b6060600380546102a290610daa565b80601f01602080910402602001604051908101604052809291908181526020018280546102ce90610daa565b801561031b5780601f106102f05761010080835404028352916020019161031b565b820191906000526020600020905b8154815290600101906020018083116102fe57829003601f168201915b5050505050905090565b6000806103306105bc565b905061033d8185856105c4565b600191505092915050565b6000600254905090565b60008061035d6105bc565b905061036a85828561078d565b610375858585610819565b60019150509392505050565b60006012905090565b6000806103956105bc565b90506103b68185856103a78589610535565b6103b19190610e0a565b6105c4565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461041890610daa565b80601f016020809104026020016040519081016040528092919081815260200182805461044490610daa565b80156104915780601f1061046657610100808354040283529160200191610491565b820191906000526020600020905b81548152906001019060200180831161047457829003601f168201915b5050505050905090565b6000806104a66105bc565b905060006104b48286610535565b9050838110156104f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f090610eb0565b60405180910390fd5b61050682868684036105c4565b60019250505092915050565b60008061051d6105bc565b905061052a818585610819565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a90610f42565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069990610fd4565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107809190610c69565b60405180910390a3505050565b60006107998484610535565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108135781811015610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc90611040565b60405180910390fd5b61081284848484036105c4565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610888576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087f906110d2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ee90611164565b60405180910390fd5b610902838383610a8f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097f906111f6565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a769190610c69565b60405180910390a3610a89848484610a94565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ad3578082015181840152602081019050610ab8565b60008484015250505050565b6000601f19601f8301169050919050565b6000610afb82610a99565b610b058185610aa4565b9350610b15818560208601610ab5565b610b1e81610adf565b840191505092915050565b60006020820190508181036000830152610b438184610af0565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7b82610b50565b9050919050565b610b8b81610b70565b8114610b9657600080fd5b50565b600081359050610ba881610b82565b92915050565b6000819050919050565b610bc181610bae565b8114610bcc57600080fd5b50565b600081359050610bde81610bb8565b92915050565b60008060408385031215610bfb57610bfa610b4b565b5b6000610c0985828601610b99565b9250506020610c1a85828601610bcf565b9150509250929050565b60008115159050919050565b610c3981610c24565b82525050565b6000602082019050610c546000830184610c30565b92915050565b610c6381610bae565b82525050565b6000602082019050610c7e6000830184610c5a565b92915050565b600080600060608486031215610c9d57610c9c610b4b565b5b6000610cab86828701610b99565b9350506020610cbc86828701610b99565b9250506040610ccd86828701610bcf565b9150509250925092565b600060ff82169050919050565b610ced81610cd7565b82525050565b6000602082019050610d086000830184610ce4565b92915050565b600060208284031215610d2457610d23610b4b565b5b6000610d3284828501610b99565b91505092915050565b60008060408385031215610d5257610d51610b4b565b5b6000610d6085828601610b99565b9250506020610d7185828601610b99565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610dc257607f821691505b602082108103610dd557610dd4610d7b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e1582610bae565b9150610e2083610bae565b9250828201905080821115610e3857610e37610ddb565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e9a602583610aa4565b9150610ea582610e3e565b604082019050919050565b60006020820190508181036000830152610ec981610e8d565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f2c602483610aa4565b9150610f3782610ed0565b604082019050919050565b60006020820190508181036000830152610f5b81610f1f565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fbe602283610aa4565b9150610fc982610f62565b604082019050919050565b60006020820190508181036000830152610fed81610fb1565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061102a601d83610aa4565b915061103582610ff4565b602082019050919050565b600060208201905081810360008301526110598161101d565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110bc602583610aa4565b91506110c782611060565b604082019050919050565b600060208201905081810360008301526110eb816110af565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061114e602383610aa4565b9150611159826110f2565b604082019050919050565b6000602082019050818103600083015261117d81611141565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111e0602683610aa4565b91506111eb82611184565b604082019050919050565b6000602082019050818103600083015261120f816111d3565b905091905056fea2646970667358221220a0a403b88af04701efa01b0f990c8f39134923f68336c74495824a563f71b31c64736f6c63430008140033";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ERC20> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC20>;
  }
  override getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): ERC20 {
    return super.attach(address) as ERC20;
  }
  override connect(signer: Signer): ERC20__factory {
    return super.connect(signer) as ERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new utils.Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {
    return new Contract(address, _abi, signerOrProvider) as ERC20;
  }
}
